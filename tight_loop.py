
import time
import numpy as np

two_d_array = [[0,0,0.5,0,0.5,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,1.5,0,0,0.5],
 [0,0,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,1,0,0,1,0,0,0],
 [0.5, 1,0,0,0,0,0,0,0,1,0,0,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,1,0,1],
 [0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,1,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0.5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,1,0,1,0,0.5,0,0,0,0,0],
 [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0],
 [2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0,0,0,1.5,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0.5,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0.5,0,0,1,0,0,0,0.5,0,0,0,1,0,0,0,0,0],
 [0,2,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0,0,0,2,0,0,0.5,0,0.5,0],
 [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0.5,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0.5,0,0,0,0.5,0,0],
 [0,0,0,0,0,0,0,0.5,0,0,0,0,0.5,0,1,0,0.5,0,0,1,1,0,1,0,0,0.5,0],
 [0,0,0,0,0.5,0,0,0,0,0,0,0,0,0,1,0.5,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,0,0,0,0.5,0,0,0,0,0,0,0,0.5,0,1,0,0,0,0,0],
 [1,0,0,0,1,0,0,0,0,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0],
 [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0.5,0,0,0,0,0.5,0,0,0,0],
 [0,1,0,0,0,0,0,0,0,0,0,0,2,0,0.5,1,0,0,0,0,0,0,0.5,0,0,1,0],
 [0,0,0,0,0,0,0,0.5,0,0,0,1,0,0.5,0,0,0,1,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.5,0.5,0,0,0,0,1,0],
 [1.5,1,0,0.5,0,0,0,0,0,1.5,0,0,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 [0,0,0,1,1,0,1,0,0.5,0,0,0,0,0,0.5,0,1,0,0.5,0,0,0,0,0,0,0,0.5],
 [0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0,0.5,0,0,0,0,1,0,1,0,0,0,0],
 [0.5,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.5,0,0]]

one_d_array = [6,6,3,3,3,0,2.5,3,1.5,6,1.5,3,6,2.5,3,6,3,3,3,3,6,3,3,6,6,3,3]

def tight_loop(array_len, input_2d_array, input_1d_array):
    score = np.ones((array_len),dtype=np.float32)

    MAX_ITERATIONS = 100
    d=0.9
    threshold = 0.0001 #convergence threshold

    for _ in range(0,MAX_ITERATIONS):
        prev_score = np.copy(score)
    
        for i in range(0,array_len):
        
            summation = 0
            for j in range(0,array_len):
                if input_2d_array[i][j] != 0:
                    summation += (input_2d_array[i][j]/input_1d_array[j])*score[j]
                    
            score[i] = (1-d) + d*(summation)
    
        if np.sum(np.fabs(prev_score-score)) <= threshold: #convergence condition
            break        

    return score

sum1 = 0
length = len(one_d_array)
for i in range(50):
    start_time = time.perf_counter()
    score = tight_loop(length, two_d_array, one_d_array)
    sum1 += time.perf_counter() - start_time

print("avg time = ", sum1/50)
print(score)
